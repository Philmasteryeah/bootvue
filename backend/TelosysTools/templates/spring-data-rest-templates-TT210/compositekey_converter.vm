/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};
#set( $currentClassName = "${entity.name}Key" )

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.convert.converter.Converter;
import ${ROOT_PKG}.common.Constants;
import ${entity.fullName}Key;

/**
 * Converter for decode a string to a $currentClassName
 * 
 * @author Telosys Tools Generator
 *
 */
public class ${currentClassName}Converter implements Converter<String, ${currentClassName}>{
	
	private static final Logger LOG = LoggerFactory.getLogger(${currentClassName}Converter.class);
	
	@Override
	public ${currentClassName} convert(String stringKey) {
		// TODO FIXME : When implemented this method, the spring-hateoas API had an issue
		// concerning the pipe encoding. The % is encoding twice. You have %257C instead of %7C
		// https://github.com/spring-projects/spring-hateoas/issues/96
		// So you can have %7C in your string. We decode automatically the given string 
		try {
			stringKey = URLDecoder.decode(stringKey,"UTF-8");
		} catch (UnsupportedEncodingException e) {
			LOG.error("Enable to decode the following string : {}",stringKey, e);
		}
		String[] stringKeys = stringKey.split("\\"+Constants.COMPOSITE_KEY_SEPARATOR);

#set( $fielsForConstructor = "" )
#set( $cpt = 0 )
#foreach( $field in $entity.keyAttributes )
#if($field.type=="int" || $field.type=="Integer")
#if($fielsForConstructor == "")
#set( $fielsForConstructor = "Integer.parseInt(stringKeys[$cpt])" )
#else
#set( $fielsForConstructor = "${fielsForConstructor}, Integer.parseInt(stringKeys[$cpt])" )
#end
#end
#if($field.type=="String")
#if($fielsForConstructor == "")
#set( $fielsForConstructor = "stringKeys[$cpt]" )
#else
#set( $fielsForConstructor = "${fielsForConstructor}, stringKeys[$cpt]" )
#end
#end
#if($field.type=="Long" || $field.type=="long")
#if($fielsForConstructor == "")
#set( $fielsForConstructor = "Long.getLong(stringKeys[$cpt])" )
#else
#set( $fielsForConstructor = "${fielsForConstructor}, Long.getLong(stringKeys[$cpt])" )
#end
#end
#if($field.type=="Short" || $field.type=="short")
#if($fielsForConstructor == "")
#set( $fielsForConstructor = "Short.parseShort(stringKeys[$cpt])" )
#else
#set( $fielsForConstructor = "${fielsForConstructor}, Short.parseShort(stringKeys[$cpt])" )
#end
#end
#set( $cpt = $cpt + 1 )
#end
		${currentClassName} compositeKey = new ${currentClassName}(${fielsForConstructor});
		return compositeKey;
	}

}