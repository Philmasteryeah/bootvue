/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder($SRC)};

import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

#set($AtLeastOneCompositeKey = "false")
#foreach( $entity in $model.allEntites)
import ${ROOT_PKG}.validator.${entity.name}Validator;
#if($entity.hasCompositePrimaryKey())
#set($AtLeastOneCompositeKey = "true")
import ${ROOT_PKG}.repository.converter.${entity.name}KeyConverter;
#end
#end
#if($AtLeastOneCompositeKey == "true")
import org.springframework.core.convert.support.ConfigurableConversionService;
#end

/**
 * Application configuration.
 * ( messages resources, validators)
 * @author Telosys Tools Generator
 *
 */
@Configuration
@ComponentScan(basePackageClasses = ApplicationConfig.class)
@EnableWebMvc
public class ApplicationConfig extends RepositoryRestMvcConfiguration {

    /**
     * Message Ressource declaration.
     * @return MessageRessource
     */
    @Bean
    public MessageSource messageSource() {
        ResourceBundleMessageSource source = new ResourceBundleMessageSource();
        source.setBasename("i18n/messages");
        source.setUseCodeAsDefaultMessage(true);
        return source;
    }

#foreach( $entity in $model.allEntites)
   /**
     * Validator declaration for $entity.name
     * @return the ${entity.name}Validator
     */
    @Bean
    public ${entity.name}Validator beforeCreate${entity.name}Validator() {
        return new ${entity.name}Validator();
    }
#end

#if($AtLeastOneCompositeKey == "true")
    /**
     * Add all converters for composite keys
     */
	@Override
	protected void configureConversionService(ConfigurableConversionService conversionService) {
		super.configureConversionService(conversionService);
#foreach( $entity in $model.allEntites)
#if($entity.hasCompositePrimaryKey())
		conversionService.addConverter(this.${entity.name.toLowerCase()}KeyConverter());
#end
#end
	}
#end

#foreach( $entity in $model.allEntites)
#if($entity.hasCompositePrimaryKey())
	/**
     * Converter for the composite key in the ${entity.name} entity
     * @return the converter
     */
    @Bean
    public ${entity.name}KeyConverter ${entity.name.toLowerCase()}KeyConverter() {
    	return new ${entity.name}KeyConverter();
    }
#end
#end

}