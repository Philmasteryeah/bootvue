/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#if ( $databases.hasDatabase( $model.databaseId ) )
#set($database = $databases.getDatabase( $model.databaseId )) 
#else
#error("No database found for this model or the databases.dbcfg file not found under the same directory as the .dbrep model file.")
#end
package ${target.javaPackageFromFolder($SRC)};

import java.sql.Driver;

import ${database.driverClass};
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.SimpleDriverDataSource;
import org.springframework.orm.jpa.JpaDialect;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.Database;
import org.springframework.orm.jpa.vendor.HibernateJpaDialect;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

/**
 * Jpa configuration.
 * @author Telosys Tools Generator
 *
 */
@Configuration
@EnableJpaRepositories
@EnableTransactionManagement
public class JpaRepositoryConfig {
#set($packages = ${database.driverClass.split("\.")})
#set($index = ${packages.size()} - 1)
#set($DriverClassName = ${packages.get($index)})
	private final Driver driver = new $DriverClassName();
    private final String databaseURL = "${database.jdbcUrl}";
    private final String username = "${database.user}";
    private final String password = "${database.password}";
    private final Database databaseVendor = Database.${database.type};

    /**
     * DataSource declaration.
     * @return the datasource
     */
    @Bean
    public DataSource dataSource() {
        DataSource dataSource = new SimpleDriverDataSource(
                  this.driver,this.databaseURL,this.username,this.password);
          return dataSource;
    }

    /**
     * EntityManager factory.
     * @return the entitu manager factory.
     */
    @Bean
    public EntityManagerFactory entityManagerFactory() {
        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        vendorAdapter.setDatabase(this.databaseVendor);
        vendorAdapter.setGenerateDdl(true);
        vendorAdapter.setShowSql(true);

        LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();
        factoryBean.setJpaVendorAdapter(vendorAdapter);
        factoryBean.setPackagesToScan(this.getClass().getPackage().getName());
        factoryBean.setDataSource(this.dataSource());

        factoryBean.afterPropertiesSet();

        return factoryBean.getObject();
    }

    /**
     * The jpa dialect declaration.
     * @return  jpaDialect
     */
    @Bean
    public JpaDialect jpaDialect() {
        return new HibernateJpaDialect();
    }

    /**
     * Transaction manager declaration.
     * @return the transaction manager.
     */
    @Bean
    public PlatformTransactionManager transactionManager() {
        JpaTransactionManager txManager = new JpaTransactionManager();
        txManager.setEntityManagerFactory(this.entityManagerFactory());
        return  txManager;
    }
}